import 'dart:io' show Platform;

import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:chatlify/core/enum.dart';
import 'package:chatlify/features/auth/domain/models/user_model.dart';
import 'package:chatlify/features/auth/presentation/providers/auth_controller.dart';
import 'package:chatlify/features/call/data/model/call_model.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:permission_handler/permission_handler.dart';

import '../../../../core/app_constants.dart';
import '../provider/call_controller.dart';

// class CallScreen extends ConsumerStatefulWidget {
//   final CallModel call;
//   final UserModel otherUser;
//
//   const CallScreen({super.key, required this.call, required this.otherUser});
//
//   @override
//   ConsumerState createState() => _CallScreenState();
// }
//
// class _CallScreenState extends ConsumerState<CallScreen> {
//
//   @override
//   Widget build(BuildContext context) {
//     final callState = ref.watch(
//         callProvider(Params(call: widget.call, otherUser: widget.otherUser)));
//     final callNotifier = ref.read(
//         callProvider(Params(call: widget.call, otherUser: widget.otherUser))
//             .notifier);
//     final currentUser = ref.watch(authControllerProvider).value?.currentUser;
//     final isVideoCall = widget.call.callType == CallType.video;
//     final isIncomingCall = widget.call.receiverId != currentUser?.id;
//     print('incoming call: ${widget.call.receiverId}$isIncomingCall');
//     return Scaffold(
//       backgroundColor: Colors.black,
//       body: SafeArea(
//         child: Stack(
//           children: [
//             ///Background
//             Container(
//               color: Theme.of(context).primaryColor.withOpacity(0.1),
//             ),
//
//             /// Video views (only for video calls)
//             if (isVideoCall) ...[
//               /// Remote video (full screen)
//               if (callState.remoteUserJoined)
//                 Center(
//                   child: AgoraVideoView(
//                       controller: VideoViewController.remote(
//                           rtcEngine: callState.engine!,
//                           canvas: const VideoCanvas(uid: 0),
//                           connection: RtcConnection(
//                               channelId: widget.call.channelName))),
//                 ),
//
//               /// Local video (picture-in-picture)
//               if (callState.localUserJoined)
//                 Positioned(
//                   right: 20,
//                   top: 20,
//                   width: 120,
//                   height: 120,
//                   child: Container(
//                     decoration: BoxDecoration(
//                       borderRadius: BorderRadius.circular(10),
//                       border: Border.all(color: Colors.white, width: 2),
//                     ),
//                     clipBehavior: Clip.hardEdge,
//                     child: callState.cameraOff
//                         ? Container(
//                             color: Colors.grey[800],
//                             child: const Center(
//                               child: Icon(
//                                 Icons.videocam_off,
//                                 color: Colors.white,
//                               ),
//                             ),
//                           )
//                         : AgoraVideoView(
//                             controller: VideoViewController(
//                                 rtcEngine: callState.engine!,
//                                 canvas: const VideoCanvas(uid: 0))),
//                   ),
//                 ),
//             ],
//
//             ///Voice Call UI
//             if (!isVideoCall || !callState.remoteUserJoined) ...[
//               Center(
//                 child: Column(
//                   mainAxisAlignment: MainAxisAlignment.center,
//                   children: [
//                     CircleAvatar(
//                       radius: 60,
//                       backgroundImage: widget.otherUser.photoUrl != null
//                           ? NetworkImage(widget.otherUser.photoUrl!)
//                           : null,
//                       child: widget.otherUser.photoUrl == null
//                           ? Text(
//                               widget.otherUser.name[0],
//                               style: TextStyle(
//                                 color: Theme.of(context).primaryColor,
//                                 fontWeight: FontWeight.bold,
//                               ),
//                             )
//                           : null,
//                     ),
//                     20.sbH,
//                     Text(
//                       widget.otherUser.name,
//                       style: const TextStyle(
//                         color: Colors.white,
//                         fontSize: 24,
//                         fontWeight: FontWeight.bold,
//                       ),
//                     ),
//                     10.sbH,
//                     Text(
//                         callState.remoteUserJoined
//                             ? (isVideoCall ? 'Video Call' : 'Voice Call')
//                             : (isIncomingCall
//                                 ? 'Incoming Call...'
//                                 : 'Calling...'),
//                         style: const TextStyle(
//                           color: Colors.white,
//                           fontSize: 16,
//                         )),
//                   ],
//                 ),
//               )
//             ],
//             Positioned(
//                 bottom: 40,
//                 left: 0,
//                 right: 0,
//                 child: Row(
//                   mainAxisAlignment: MainAxisAlignment.spaceEvenly,
//                   children: [
//                     CircleAvatar(
//                       radius: 30,
//                       backgroundColor: Colors.grey.withOpacity(0.3),
//                       child: IconButton(
//                           onPressed: () {
//                             callNotifier.toggleMute();
//                             print('Call state: ${callState.muted}');
//                           },
//                           icon: Icon(
//                             callState.muted ? Icons.mic_off : Icons.mic,
//                             color: Colors.white,
//                           )),
//                     ),
//                     if (isVideoCall)
//                       CircleAvatar(
//                         radius: 30,
//                         backgroundColor: Colors.grey.withOpacity(0.3),
//                         child: IconButton(
//                             onPressed: callNotifier.toggleCamera,
//                             icon: Icon(callState.cameraOff
//                                 ? Icons.videocam_off
//                                 : Icons.videocam)),
//                       ),
//                     CircleAvatar(
//                       radius: 30,
//                       backgroundColor: Colors.red,
//                       child: IconButton(
//                           onPressed: () async {
//                             await callNotifier.endCall();
//                             if (mounted) {
//                               Navigator.of(context).pop();
//                             }
//                           },
//                           icon: const Icon(
//                             Icons.call_end,
//                             color: Colors.white,
//                             size: 20,
//                           )),
//                     ),
//                     CircleAvatar(
//                       radius: 30,
//                       backgroundColor: Colors.grey.withOpacity(0.3),
//                       child: IconButton(
//                           onPressed: callNotifier.toggleSpeaker,
//                           icon: Icon(callState.speakerOn
//                               ? Icons.volume_up
//                               : Icons.volume_down)),
//                     ),
//                     if (isVideoCall)
//                       CircleAvatar(
//                         radius: 30,
//                         backgroundColor: Colors.grey.withOpacity(0.3),
//                         child: IconButton(
//                             onPressed: callNotifier.toggleCamera,
//                             icon: const Icon(
//                               Icons.flip_camera_ios,
//                               color: Colors.white,
//                             )),
//                       )
//                   ],
//                 ))
//           ],
//         ),
//       ),
//     );
//   }
// }

class CallScreen extends ConsumerStatefulWidget {
  final CallModel call;
  final UserModel otherUser;

  const CallScreen({
    super.key,
    required this.call,
    required this.otherUser,
  });

  @override
  ConsumerState<CallScreen> createState() => _CallScreenState();
}

class _CallScreenState extends ConsumerState<CallScreen> {
  RtcEngine? _engine;
  bool _localUserJoined = false;
  bool _remoteUserJoined = false;
  bool _muted = false;
  bool _speakerOn = true;
  bool _cameraOff = false;

  @override
  void initState() {
    super.initState();
    _initializeAgora();
  }

  Future<void> _initializeAgora() async {
    try {
      // Request permissions first
      await [Permission.microphone, Permission.camera].request();

      // Create RTC engine instance
      _engine = createAgoraRtcEngine();
      await _engine!.initialize(const RtcEngineContext(
        appId: AppConstants.agoraAppId,
      ));

      // Register event handlers
      _engine!.registerEventHandler(RtcEngineEventHandler(
        onJoinChannelSuccess: (connection, elapsed) {
          setState(() {
            _localUserJoined = true;
          });
        },
        onUserJoined: (connection, remoteUid, elapsed) {
          setState(() {
            _remoteUserJoined = true;
          });
        },
        onUserOffline: (connection, remoteUid, reason) {
          setState(() {
            _remoteUserJoined = false;
          });
          // Auto-end call if remote user disconnects
          _endCall();
        },
      ));

      // Enable video if it's a video call
      if (widget.call.callType == CallType.video) {
        await _engine!.enableVideo();
        await _engine!.startPreview();

        // For video calls, auto-enable speaker without explicitly calling problematic method
        setState(() {
          _speakerOn = true;
        });
      } else {
        await _engine!.disableVideo();
        // For audio calls, let the system decide the default
      }

      // Join the channel without trying to set the speaker
      await _engine!.joinChannel(
        token: widget.call.token ?? '',
        channelId: widget.call.channelName ?? '',
        uid: 0,
        options: const ChannelMediaOptions(),
      );

      // Update call status
      if (widget.call.callStatus == CallStatus.pending) {
        await ref.read(callControllerProvider.notifier).acceptCall(widget.call);
      }
    } catch (e) {
      print("Error initializing Agora: $e");
    }
  }

  // Future<void> _initializeAgora() async {
  //   // Request permissions first
  //   await [Permission.microphone, Permission.camera].request();
  //
  //   // Create RTC engine instance
  //   _engine = createAgoraRtcEngine();
  //   await _engine!.initialize(RtcEngineContext(
  //     appId: AppConstants.agoraAppId,
  //   ));
  //
  //   // Register event handlers
  //   _engine!.registerEventHandler(RtcEngineEventHandler(
  //     onJoinChannelSuccess: (connection, elapsed) {
  //       setState(() {
  //         _localUserJoined = true;
  //       });
  //     },
  //     onUserJoined: (connection, remoteUid, elapsed) {
  //       setState(() {
  //         _remoteUserJoined = true;
  //       });
  //     },
  //     onUserOffline: (connection, remoteUid, reason) {
  //       setState(() {
  //         _remoteUserJoined = false;
  //       });
  //       // Auto-end call if remote user disconnects
  //       _endCall();
  //     },
  //   ));
  //
  //   // Enable video if it's a video call
  //   if (widget.call.callType == CallType.video) {
  //     await _engine!.enableVideo();
  //     await _engine!.startPreview();
  //   } else {
  //     await _engine!.disableVideo();
  //   }
  //
  //   // Set audio parameters
  //   await _engine!.setEnableSpeakerphone(_speakerOn);
  //
  //   // Join the channel
  //   await _engine!.joinChannel(
  //     token: widget.call.token ?? '',
  //     channelId: widget.call.channelName ?? '',
  //     uid: 0, // UID can be generated by Agora
  //     options: const ChannelMediaOptions(
  //
  //     ),
  //   );
  //
  //   // Update call status
  //   if (widget.call.callStatus == CallStatus.pending) {
  //     await ref.read(callControllerProvider.notifier).acceptCall(widget.call);
  //   }
  // }

  void _toggleMute() {
    setState(() {
      _muted = !_muted;
    });
    _engine?.muteLocalAudioStream(_muted);
  }

  // void _toggleSpeaker() {
  //   setState(() {
  //     _speakerOn = !_speakerOn;
  //   });
  //   _engine?.setEnableSpeakerphone(_speakerOn);
  // }

  Future<void> _toggleSpeakerPhone(bool enable) async {
    if (_engine == null) return;

    try {
      // First try the standard method
      await _engine!.setEnableSpeakerphone(enable);
    } catch (e) {
      print("Standard speaker toggle failed: $e");

      try {
        // Alternative approach - try setting audio routing
        await _engine!.setDefaultAudioRouteToSpeakerphone(enable);
      } catch (e) {
        print("Alternative speaker toggle also failed: $e");

        // As a last resort, use the device manager differently
        if (Platform.isAndroid) {
          try {
            final audioDeviceManager = await _engine!.getAudioDeviceManager();

            // These are the correct methods for AudioDeviceManager
            if (enable) {
              // Set to speaker
              final devices =
                  await audioDeviceManager.enumeratePlaybackDevices();
              for (var device in devices) {
                if (device.deviceName!.toLowerCase().contains('speaker')) {
                  await audioDeviceManager
                      .setPlaybackDevice(device.deviceId ?? '');
                  break;
                }
              }
            } else {
              // Set to earpiece
              final devices =
                  await audioDeviceManager.enumeratePlaybackDevices();
              for (var device in devices) {
                if (device.deviceName!.toLowerCase().contains('earpiece')) {
                  await audioDeviceManager
                      .setPlaybackDevice(device.deviceId ?? '');
                  break;
                }
              }
            }
          } catch (e) {
            print("Device manager audio routing failed: $e");
          }
        }
      }
    }

    // Update state regardless of success to maintain UI consistency
    setState(() {
      _speakerOn = enable;
    });
  }

  void _toggleCamera() {
    if (widget.call.callType == CallType.voice) return;

    setState(() {
      _cameraOff = !_cameraOff;
    });

    if (_cameraOff) {
      _engine?.disableVideo();
    } else {
      _engine?.enableVideo();
    }
  }

  void _switchCamera() {
    if (widget.call.callType == CallType.voice) return;
    _engine?.switchCamera();
  }

  Future<void> _endCall() async {
    await ref.read(callControllerProvider.notifier).endCall(widget.call.callId);
    if (mounted) {
      Navigator.of(context).pop();
    }
  }

  @override
  void dispose() {
    _engine?.leaveChannel();
    _engine?.release();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final isVideoCall = widget.call.callType == CallType.video;
    final currentUser = ref.watch(authControllerProvider).value?.currentUser;
    final isIncoming = widget.call.receiverId == currentUser?.id;

    return Scaffold(
      backgroundColor: Colors.black,
      body: SafeArea(
        child: Stack(
          children: [
            // Background
            Container(
              color: Theme.of(context).primaryColor.withOpacity(0.1),
            ),

            // Video views (only for video calls)
            if (isVideoCall) ...[
              // Remote video (full screen)
              if (_remoteUserJoined)
                Center(
                  child: AgoraVideoView(
                    controller: VideoViewController.remote(
                      rtcEngine: _engine!,
                      canvas: const VideoCanvas(uid: 0),
                      connection:
                          RtcConnection(channelId: widget.call.channelName!),
                    ),
                  ),
                ),

              // Local video (picture-in-picture)
              if (_localUserJoined)
                Positioned(
                  right: 20,
                  top: 20,
                  width: 120,
                  height: 160,
                  child: Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      border: Border.all(color: Colors.white, width: 2),
                    ),
                    clipBehavior: Clip.hardEdge,
                    child: _cameraOff
                        ? Container(
                            color: Colors.grey[800],
                            child: const Center(
                              child:
                                  Icon(Icons.videocam_off, color: Colors.white),
                            ),
                          )
                        : AgoraVideoView(
                            controller: VideoViewController(
                              rtcEngine: _engine!,
                              canvas: const VideoCanvas(uid: 0),
                            ),
                          ),
                  ),
                ),
            ],

            // Voice call UI
            if (!isVideoCall || !_remoteUserJoined) ...[
              Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircleAvatar(
                      radius: 60,
                      backgroundImage: widget.otherUser.photoUrl != null
                          ? NetworkImage(widget.otherUser.photoUrl!)
                          : null,
                      backgroundColor: Theme.of(context).colorScheme.tertiary,
                      child: widget.otherUser.photoUrl == null
                          ? Text(
                              widget.otherUser.name[0].toUpperCase(),
                              style: TextStyle(
                                color: Theme.of(context).primaryColor,
                                fontWeight: FontWeight.bold,
                                fontSize: 40,
                              ),
                            )
                          : null,
                    ),
                    const SizedBox(height: 20),
                    Text(
                      widget.otherUser.name,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 10),
                    Text(
                      _remoteUserJoined
                          ? (isVideoCall ? 'Video Call' : 'Voice Call')
                          : (isIncoming ? 'Incoming Call...' : 'Calling...'),
                      style: TextStyle(
                        color: Colors.white.withOpacity(0.8),
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
              ),
            ],

            // Call controls
            Positioned(
              bottom: 40,
              left: 0,
              right: 0,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  CircleAvatar(
                    radius: 30,
                    backgroundColor: Colors.grey.withOpacity(0.3),
                    child: IconButton(
                      icon: Icon(_muted ? Icons.mic_off : Icons.mic,
                          color: Colors.white),
                      onPressed: _toggleMute,
                    ),
                  ),
                  if (isVideoCall)
                    CircleAvatar(
                      radius: 30,
                      backgroundColor: Colors.grey.withOpacity(0.3),
                      child: IconButton(
                        icon: Icon(
                            _cameraOff ? Icons.videocam_off : Icons.videocam,
                            color: Colors.white),
                        onPressed: _toggleCamera,
                      ),
                    ),
                  CircleAvatar(
                    radius: 40,
                    backgroundColor: Colors.red,
                    child: IconButton(
                      icon: const Icon(Icons.call_end,
                          color: Colors.white, size: 30),
                      onPressed: _endCall,
                    ),
                  ),
                  CircleAvatar(
                    radius: 30,
                    backgroundColor: Colors.grey.withOpacity(0.3),
                    child: IconButton(
                      icon: Icon(
                          _speakerOn ? Icons.volume_up : Icons.volume_down,
                          color: Colors.white),
                      onPressed: () {
                        _toggleSpeakerPhone(_speakerOn);
                      },
                    ),
                  ),
                  if (isVideoCall)
                    CircleAvatar(
                      radius: 30,
                      backgroundColor: Colors.grey.withOpacity(0.3),
                      child: IconButton(
                        icon: const Icon(Icons.flip_camera_ios,
                            color: Colors.white),
                        onPressed: _switchCamera,
                      ),
                    ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
